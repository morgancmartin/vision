// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iTJnNP8tTWeqztkYCLWG3v
// Component: eCPhM4H2AW

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import ResultTile from "../../ResultTile"; // plasmic-import: uZPn8ps5Tw/component
import Button from "../../Button"; // plasmic-import: hNBe8CGvMSl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: iTJnNP8tTWeqztkYCLWG3v/projectcss
import sty from "./PlasmicResults.module.css"; // plasmic-import: eCPhM4H2AW/css

import XCircleIcon from "./icons/PlasmicIcon__XCircle"; // plasmic-import: 4TEsGPev0/icon
import UnionIcon from "./icons/PlasmicIcon__Union"; // plasmic-import: HzrXeJxGv/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: _BAnEXFX-aP/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 31UAxQ8ZIvu/icon
import wonder1687803881391JpgGl36XgdY from "./images/wonder1687803881391Jpg.jpg"; // plasmic-import: gl36Xgd-Y/picture

export type PlasmicResults__VariantMembers = {};
export type PlasmicResults__VariantsArgs = {};
type VariantPropType = keyof PlasmicResults__VariantsArgs;
export const PlasmicResults__VariantProps = new Array<VariantPropType>();

export type PlasmicResults__ArgsType = {};
type ArgPropType = keyof PlasmicResults__ArgsType;
export const PlasmicResults__ArgProps = new Array<ArgPropType>();

export type PlasmicResults__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultResultsProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicResults__RenderFunc(props: {
  variants: PlasmicResults__VariantsArgs;
  args: PlasmicResults__ArgsType;
  overrides: PlasmicResults__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__npQqV)}>
            <section className={classNames(projectcss.all, sty.section__zSb6K)}>
              <section
                className={classNames(projectcss.all, sty.section__cl5Bi)}
              >
                <section
                  className={classNames(projectcss.all, sty.section___2Q8Gz)}
                >
                  <XCircleIcon
                    className={classNames(projectcss.all, sty.svg__pOhnp)}
                    role={"img"}
                  />
                </section>
              </section>
              <section
                className={classNames(projectcss.all, sty.section__ytfRh)}
              >
                <section
                  className={classNames(projectcss.all, sty.section__iBq1J)}
                >
                  <UnionIcon
                    className={classNames(projectcss.all, sty.svg__dIy6L)}
                    role={"img"}
                  />
                </section>
              </section>
            </section>
            <p.Stack
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section__i26QG)}
            >
              <section
                className={classNames(projectcss.all, sty.section__anjqp)}
              >
                <ResultTile
                  className={classNames(
                    "__wab_instance",
                    sty.resultTile__mhbpP
                  )}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ul4Fr)}
                    displayHeight={"94%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"100%" as const}
                    displayMinWidth={"100%" as const}
                    displayWidth={"635px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: wonder1687803881391JpgGl36XgdY,
                      fullWidth: 3072,
                      fullHeight: 2048,
                      aspectRatio: undefined,
                    }}
                  />
                </ResultTile>
              </section>
              <section
                className={classNames(projectcss.all, sty.section__fcXu)}
              >
                <ResultTile
                  className={classNames(
                    "__wab_instance",
                    sty.resultTile___3Vli
                  )}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__nowta)}
                    displayHeight={"94%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"100%" as const}
                    displayMinWidth={"100%" as const}
                    displayWidth={"635px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: wonder1687803881391JpgGl36XgdY,
                      fullWidth: 3072,
                      fullHeight: 2048,
                      aspectRatio: undefined,
                    }}
                  />
                </ResultTile>
              </section>
            </p.Stack>
            <section
              className={classNames(projectcss.all, sty.section__jLeC0)}
            />

            <p.Stack
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section__tkl6B)}
            >
              <section
                className={classNames(projectcss.all, sty.section__cAsA7)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__m4EIz)}
                >
                  {"Publish"}
                </Button>
              </section>
              <section
                className={classNames(projectcss.all, sty.section___4WuA)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__osAke)}
                  color={(() => {
                    try {
                      return "white";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Share"}
                  </div>
                </Button>
              </section>
            </p.Stack>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResults__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResults__VariantsArgs;
    args?: PlasmicResults__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResults__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicResults__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicResults__ArgProps,
          internalVariantPropNames: PlasmicResults__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicResults__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResults";
  } else {
    func.displayName = `PlasmicResults.${nodeName}`;
  }
  return func;
}

export const PlasmicResults = Object.assign(
  // Top-level PlasmicResults renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicResults
    internalVariantProps: PlasmicResults__VariantProps,
    internalArgProps: PlasmicResults__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicResults;
/* prettier-ignore-end */
